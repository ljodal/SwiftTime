//
//  SwiftTime+Array.swift
//  SwiftTime
//
//  Created by Sigurd Ljødal on 19.09.2015.
//  Copyright © 2015 Sigurd Ljødal. All rights reserved.
//

//import simd

///
/// A struct that stores precalculated time zone transitions.
///
public struct PrecalculatedZone {

    private let transitions: [Int64]
    private let offsets: [Int64]
    private let standardOffset: Int64
    private let _name: String

    /// Construct a new Zone with the given transitions and a default offset.
    /// All transitions must be in seconds since the UNIX epoch.
    public init(transitions: [Int64], offsets: [Int64], standardOffset: Int64, name: String) {
        self.transitions = transitions
        self.offsets = offsets
        self.standardOffset = standardOffset
        self._name = name
    }

    func offsetAt(time: Int64) -> Int64 {
        var low = 0;
        var high = transitions.count - 1;

        while (low <= high) {

            let mid = (low + high) >> 1
            let transition = transitions[mid]

            if transition < time {
                low = mid + 1
            } else if transition > time {
                high = mid - 1
            } else {
                return offsets[mid] // exact match found
            }
        }

        if low == 0 {
            return standardOffset
        } else {
            return offsets[low - 1]
        }
    }

    /*
    private func transition_vectors() -> [int4] {
        return 0.stride(to: transitions.count, by: 4).lazy.map {(i: Int) -> int4 in
            return int4(
                self.transitions[i],
                self.transitions[i+1],
                self.transitions[i+2],
                self.transitions[i+3])
        }
    }
    */

    public static let CET = PrecalculatedZone(
        transitions: [
            -1693706400000,-1680483600000,-1663455600000,-1650150000000,-1632006000000,
            -1618700400000,-938905200000,-857257200000,-844556400000,-828226800000,
            -812502000000,-796777200000,-781052400000,-766623600000,228877200000,
            243997200000,260326800000,276051600000,291776400000,307501200000,323830800000,
            338950800000,354675600000,370400400000,386125200000,401850000000,417574800000,
            433299600000,449024400000,465354000000,481078800000,496803600000,512528400000,
            528253200000,543978000000,559702800000,575427600000,591152400000,606877200000,
            622602000000,638326800000,654656400000,670381200000,686106000000,701830800000,
            717555600000,733280400000,749005200000,764730000000,780454800000,796179600000,
            811904400000,828234000000,846378000000,859683600000,877827600000,891133200000,
            909277200000,922582800000,941331600000,954032400000,972781200000,985482000000,
            1004230800000,1017536400000,1035680400000,1048986000000,1067130000000,
            1080435600000,1099184400000,1111885200000,1130634000000,1143334800000,
            1162083600000,1174784400000,1193533200000,1206838800000,1224982800000,
            1238288400000,1256432400000,1269738000000,1288486800000,1301187600000,
            1319936400000,1332637200000,1351386000000,1364691600000,1382835600000,
            1396141200000,1414285200000,1427590800000,1445734800000,1459040400000,
            1477789200000,1490490000000,1509238800000,1521939600000,1540688400000,
            1553994000000,1572138000000,1585443600000,1603587600000,1616893200000,
            1635642000000,1648342800000,1667091600000,1679792400000,1698541200000,
            1711846800000,1729990800000,1743296400000,1761440400000,1774746000000,
            1792890000000,1806195600000,1824944400000,1837645200000,1856394000000,
            1869094800000,1887843600000,1901149200000,1919293200000,1932598800000,
            1950742800000,1964048400000,1982797200000,1995498000000,2014246800000,
            2026947600000,2045696400000,2058397200000,2077146000000,2090451600000,
            2108595600000,2121901200000,2140045200000,2153350800000,2172099600000,
            2184800400000,2203549200000,2216250000000,2234998800000,2248304400000,
            2266448400000,2279754000000,2297898000000,2311203600000,2329347600000,
            2342653200000,2361402000000,2374102800000,2392851600000,2405552400000,
            2424301200000,2437606800000,2455750800000,2469056400000,2487200400000,
            2500506000000,2519254800000,2531955600000,2550704400000,2563405200000,
            2582154000000,2595459600000,2613603600000,2626909200000,2645053200000,
            2658358800000,2676502800000,2689808400000,2708557200000,2721258000000,
            2740006800000,2752707600000,2771456400000,2784762000000,2802906000000,
            2816211600000,2834355600000,2847661200000,2866410000000,2879110800000,
            2897859600000,2910560400000,2929309200000,2942010000000,2960758800000,
            2974064400000,2992208400000,3005514000000,3023658000000
        ],
        offsets: [
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,7200000,3600000,
            7200000,3600000
        ],
        standardOffset: 3_600_000,
        name: "Europe/Oslo"
    );
}

extension PrecalculatedZone : TimeZone {


    public func offsetAt<T : Temporal>(temporal: T) -> Seconds {
        return (offsetAt(temporal.toMillis()) / 1000).seconds
    }


    /// Get the time of the next offset transition, if any
    public func nextTransition<T : Temporal>(temporal: T) -> T? {
        return nil;
    }

    /// Get the time of the previous offset transition, if any
    public func prevTransition<T : Temporal>(temporal: T) -> T? {
        return nil;
    }

    public func name() -> String {
        return _name;
    }
}